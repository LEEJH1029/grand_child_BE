name: Java CI with Gradle

on:
  pull_request:
    branches: [ "main" ]
    types:
      - closed

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 19
      uses: actions/setup-java@v3
      with:
        java-version: '19'
        distribution: 'temurin'
    ## Add the following step to give execute permission to gradlew
    - name: Give execute permission to gradlew
      run: chmod +x ./gradlew
    ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
        
    ## create application-prod.properties
    - name: make application-prod.properties
      if: github.event.pull_request.merged == true # pull request가 merge된 경우에만 실행
      run: |
          cd ./src/main/resources
          touch ./application-prod.properties
          echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.properties
      shell: bash
      
    ## gradle build
    - name: Build with Gradle
      run: ./gradlew build -x test

    ## docker build & push to production
    - name: Docker build & push to prod
      if: github.event.pull_request.merged == true # pull request가 merge된 경우에만 실행
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_USERNAME }}/grandchild-prod .
          docker push ${{ secrets.DOCKER_USERNAME }}/grandchild-prod
          
    ## deploy to production
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: github.event.pull_request.merged == true # pull request가 merge된 경우에만 실행
      with:
          host: ${{ secrets.HOST_PROD }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          envs: GITHUB_SHA
          script: |
              sudo docker stop grandchild
              sudo docker rm grandchild
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/grandchild-prod
              sudo docker run -d -p 8080:8080 --name dub ${{ secrets.DOCKER_USERNAME }}/grandchild-prod
              sudo docker image prune -f
 
